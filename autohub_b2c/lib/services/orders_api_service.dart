import 'package:dio/dio.dart';
import '../models/product_model.dart';
import 'api_client.dart';

class OrdersApiService {
  final ApiClient _apiClient;

  OrdersApiService(this._apiClient);

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
  Future<List<Order>> getRecentOrders({int limit = 5}) async {
    try {
      final response = await _apiClient.get(
        '/orders/recent',
        queryParameters: {'limit': limit},
      );

      final data = response.data as List<dynamic>;
      return data.map((json) => Order.fromJson(json)).toList();
    } catch (e) {
      // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      print('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: $e');
      return _getMockRecentOrders(limit);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<Order>> getUserOrders() async {
    try {
      print('üì¶ Loading user orders from B2C API...');
      final response = await _apiClient.get('/b2c/orders');
      print('üì¶ B2C API response: ${response.statusCode}');
      
      // B2C API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å data
      final responseData = response.data;
      final data = responseData['data'] as List<dynamic>;
      final orders = data.map((json) => Order.fromJson(json)).toList();
      print('‚úÖ Loaded ${orders.length} orders');
      return orders;
    } catch (e) {
      print('‚ùå Error loading orders from B2C API: $e');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
  Future<Order> getOrder(String orderId) async {
    try {
      final response = await _apiClient.get('/orders/$orderId');
      return Order.fromJson(response.data);
    } catch (e) {
      // Fallback to mock data
      return _getMockOrder(orderId);
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
  Future<Order> createOrder({
    required List<OrderItem> items,
    required String shippingAddress,
    String? notes,
  }) async {
    try {
      print('üìù Creating B2C order with ${items.length} items...');
      
      final orderData = {
        'items': items.map((item) => ({
          'itemId': item.productId,
          'quantity': item.quantity,
        })).toList(),
        'notes': notes,
      };

      print('üìù B2C Order data: $orderData');
      
      final response = await _apiClient.post('/b2c/orders', data: orderData);
      print('‚úÖ B2C Order created: ${response.statusCode}');
      
      // B2C API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å data
      return Order.fromJson(response.data['data']);
    } catch (e) {
      print('‚ùå Error creating B2C order: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑: $e');
    }
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
  Future<void> cancelOrder(String orderId) async {
    try {
      await _apiClient.put('/orders/$orderId/cancel');
    } catch (e) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑: $e');
    }
  }

  // Mock data –¥–ª—è fallback
  List<Order> _getMockRecentOrders(int limit) {
    final orders = _getMockUserOrders();
    return orders.take(limit).toList();
  }

  List<Order> _getMockUserOrders() {
    final now = DateTime.now();
    return [
      Order(
        id: 1,
        orderNumber: 'ORD-2025-001',
        customerId: 1,
        items: [
          OrderItem(
            id: 1,
            productId: 1,
            productName: '–§–∞—Ä—ã –ø–µ—Ä–µ–¥–Ω–∏–µ LED Toyota Camry',
            productImage: 'https://via.placeholder.com/100x100',
            price: 45000,
            quantity: 1,
            total: 45000,
          ),
        ],
        totalAmount: 45000,
        status: 'processing',
        paymentStatus: 'paid',
        shippingAddress: '–ê–ª–º–∞—Ç—ã, —É–ª. –ê–±–∞—è 123',
        notes: '–î–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ 18:00',
        createdAt: now.subtract(const Duration(days: 1)),
        updatedAt: now.subtract(const Duration(hours: 12)),
      ),
      Order(
        id: 2,
        orderNumber: 'ORD-2025-002',
        customerId: 1,
        items: [
          OrderItem(
            id: 2,
            productId: 2,
            productName: '–ú–∞—Å–ª–æ –º–æ—Ç–æ—Ä–Ω–æ–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ 5W-30',
            productImage: 'https://via.placeholder.com/100x100',
            price: 12000,
            quantity: 2,
            total: 24000,
          ),
          OrderItem(
            id: 3,
            productId: 4,
            productName: '–§–∏–ª—å—Ç—Ä –≤–æ–∑–¥—É—à–Ω—ã–π BMW X5',
            productImage: 'https://via.placeholder.com/100x100',
            price: 8000,
            quantity: 1,
            total: 8000,
          ),
        ],
        totalAmount: 32000,
        status: 'shipped',
        paymentStatus: 'paid',
        shippingAddress: '–ê–ª–º–∞—Ç—ã, —É–ª. –ê–±–∞—è 123',
        createdAt: now.subtract(const Duration(days: 3)),
        updatedAt: now.subtract(const Duration(days: 1)),
      ),
      Order(
        id: 3,
        orderNumber: 'ORD-2025-003',
        customerId: 1,
        items: [
          OrderItem(
            id: 4,
            productId: 3,
            productName: '–¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ –ø–µ—Ä–µ–¥–Ω–∏–µ Honda Accord',
            productImage: 'https://via.placeholder.com/100x100',
            price: 25000,
            quantity: 1,
            total: 25000,
          ),
        ],
        totalAmount: 25000,
        status: 'delivered',
        paymentStatus: 'paid',
        shippingAddress: '–ê–ª–º–∞—Ç—ã, —É–ª. –ê–±–∞—è 123',
        createdAt: now.subtract(const Duration(days: 7)),
        updatedAt: now.subtract(const Duration(days: 5)),
      ),
    ];
  }

  Order _getMockOrder(String orderId) {
    final orders = _getMockUserOrders();
    final order = orders.firstWhere(
      (o) => o.id.toString() == orderId,
      orElse: () => orders.first,
    );
    return order;
  }
}
