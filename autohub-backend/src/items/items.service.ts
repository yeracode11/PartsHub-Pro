import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Item } from './entities/item.entity';

@Injectable()
export class ItemsService {
  constructor(
    @InjectRepository(Item)
    private readonly itemRepository: Repository<Item>,
  ) {}

  async getPopularItems(organizationId: string, limit: number) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–∫–∞–∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å)
    const items = await this.itemRepository.find({
      where: { organizationId },
      order: { quantity: 'DESC' }, // –ß–µ–º –±–æ–ª—å—à–µ –Ω–∞ —Å–∫–ª–∞–¥–µ, —Ç–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–µ–µ
      take: limit,
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Flutter API
    const formattedItems = items.map((item) => ({
      id: item.id,
      name: item.name,
      soldCount: item.quantity, // –ò—Å–ø–æ–ª—å–∑—É–µ–º quantity –∫–∞–∫ soldCount –¥–ª—è –¥–µ–º–æ
      price: Number(item.price),
      imageUrl: item.imageUrl,
    }));

    return { items: formattedItems };
  }

  // CRUD –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
  async findAll(organizationId: string) {
    return await this.itemRepository.find({
      where: { organizationId },
      order: { createdAt: 'DESC' },
    });
  }

  async findOne(id: number, organizationId: string) {
    const item = await this.itemRepository.findOne({
      where: { id, organizationId },
    });
    if (!item) {
      throw new Error(`Item with ID ${id} not found`);
    }
    return item;
  }

  async create(organizationId: string, data: Partial<Item>) {
    const item = this.itemRepository.create({
      ...data,
      organizationId,
      syncedToB2C: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ B2C
    });
    return await this.itemRepository.save(item);
  }

  async update(id: number, organizationId: string, data: Partial<Item>) {
    await this.findOne(id, organizationId); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    await this.itemRepository.update({ id, organizationId }, data);
    return await this.findOne(id, organizationId);
  }

  async remove(id: number, organizationId: string) {
    await this.findOne(id, organizationId); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    await this.itemRepository.delete({ id, organizationId });
    return { success: true };
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è B2C –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  async findAllForB2C(options: {
    category?: string;
    search?: string;
    limit?: number;
    offset?: number;
  }) {
    console.log('üîç findAllForB2C called with options:', options);
    
    const queryBuilder = this.itemRepository
      .createQueryBuilder('item')
      .leftJoinAndSelect('item.organization', 'organization')
      .where('item.quantity > 0'); // –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏
      // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É synced –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤

    if (options.category && options.category !== '–í—Å–µ') {
      queryBuilder.andWhere('item.category = :category', { category: options.category });
    }

    if (options.search) {
      queryBuilder.andWhere(
        '(item.name LIKE :search OR item.description LIKE :search OR item.sku LIKE :search)',
        { search: `%${options.search}%` }
      );
    }

    if (options.limit) {
      queryBuilder.limit(options.limit);
    }

    if (options.offset) {
      queryBuilder.offset(options.offset);
    }

    queryBuilder.orderBy('item.createdAt', 'DESC');

    const sql = queryBuilder.getSql();
    const params = queryBuilder.getParameters();
    console.log('üîç SQL Query:', sql);
    console.log('üîç Query Params:', params);
    
    const items = await queryBuilder.getMany();
    console.log(`‚úÖ findAllForB2C found ${items.length} items`);
    
    return items;
  }

  async getPopularForB2C(limit: number) {
    return await this.itemRepository
      .createQueryBuilder('item')
      .leftJoinAndSelect('item.organization', 'organization')
      .where('item.quantity > 0')
      // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É synced
      .orderBy('item.quantity', 'DESC') // –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞ —Å–∫–ª–∞–¥–µ
      .limit(limit)
      .getMany();
  }

  async findOneForB2C(id: number) {
    return await this.itemRepository
      .createQueryBuilder('item')
      .leftJoinAndSelect('item.organization', 'organization')
      .where('item.id = :id', { id })
      .andWhere('item.quantity > 0')
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É synced - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏
      .getOne();
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
  async addImages(id: number, organizationId: string, imageUrls: string[]) {
    const item = await this.findOne(id, organizationId);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!item.images) {
      item.images = [];
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    item.images = [...item.images, ...imageUrls];
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ
    if (!item.imageUrl && imageUrls.length > 0) {
      item.imageUrl = imageUrls[0];
    }
    
    return await this.itemRepository.save(item);
  }

  async removeImage(id: number, organizationId: string, imageUrl: string) {
    const item = await this.findOne(id, organizationId);
    
    if (!item.images) {
      throw new Error('No images found for this item');
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞
    item.images = item.images.filter(img => img !== imageUrl);
    
    // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ
    if (item.imageUrl === imageUrl) {
      item.imageUrl = item.images.length > 0 ? item.images[0] : '';
    }
    
    return await this.itemRepository.save(item);
  }

  async setMainImage(id: number, organizationId: string, imageUrl: string) {
    const item = await this.findOne(id, organizationId);
    
    if (!item.images || !item.images.includes(imageUrl)) {
      throw new Error('Image not found in item images');
    }
    
    item.imageUrl = imageUrl;
    return await this.itemRepository.save(item);
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ B2C –º–∞–≥–∞–∑–∏–Ω
  async syncToB2C(id: number, organizationId: string) {
    const item = await this.findOne(id, organizationId);
    item.syncedToB2C = true;
    const updatedItem = await this.itemRepository.save(item);
    
    console.log(`‚úÖ Item ${item.id} (${item.name}) synced to B2C marketplace`);
    return updatedItem;
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ B2C
  async syncAllToB2C(organizationId: string) {
    const items = await this.itemRepository.find({
      where: { organizationId },
    });
    
    let syncedCount = 0;
    for (const item of items) {
      if (!item.syncedToB2C) {
        item.syncedToB2C = true;
        await this.itemRepository.save(item);
        syncedCount++;
      }
    }
    
    console.log(`‚úÖ Synced ${syncedCount} items to B2C marketplace`);
    return { 
      synced: syncedCount, 
      total: items.length,
      message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${syncedCount} –∏–∑ ${items.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ B2C –º–∞–≥–∞–∑–∏–Ω`
    };
  }
}

