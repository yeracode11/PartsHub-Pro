import {
  Controller,
  Get,
  Query,
  Param,
} from '@nestjs/common';
import { ItemsService } from '../items/items.service';
import { OrganizationsService } from '../organizations/organizations.service';

@Controller('api/b2c')
export class B2CController {
  constructor(
    private readonly itemsService: ItemsService,
    private readonly organizationsService: OrganizationsService,
  ) {}

  // –ü—É–±–ª–∏—á–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è B2C
  @Get('parts')
  async getParts(
    @Query('category') category?: string,
    @Query('search') search?: string,
    @Query('limit') limit?: string,
    @Query('offset') offset?: string,
  ) {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è B2C
    const items = await this.itemsService.findAllForB2C({
      category,
      search,
      limit: limit ? parseInt(limit) : undefined,
      offset: offset ? parseInt(offset) : undefined,
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è B2C
    return {
      data: items.map(item => {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤ –ø–æ–ª–Ω—ã–µ URL
        let images = item.images && item.images.length > 0 ? item.images : (item.imageUrl ? [item.imageUrl] : []);
        console.log('üîç Processing images for item', item.id, 'original:', images);
        images = images.map(img => {
          // –ï—Å–ª–∏ URL —É–∂–µ –ø–æ–ª–Ω—ã–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
          if (img.startsWith('http')) {
            return img;
          }
          // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
          const fullUrl = `http://localhost:3000${img}`;
          console.log('üì∏ Converting image URL:', img, '->', fullUrl);
          return fullUrl;
        });
        console.log('‚úÖ Final images for item', item.id, ':', images);

        return {
          id: item.id,
          name: item.name,
          description: item.description,
          category: item.category,
          brand: item.sku ? item.sku.split('-')[0] : 'Unknown', // –ò–∑–≤–ª–µ–∫–∞–µ–º –±—Ä–µ–Ω–¥ –∏–∑ SKU
          sku: item.sku,
          price: Number(item.price),
          stock: item.quantity,
          condition: item.condition,
          images: images,
          sellerName: item.organization?.name || 'AutoHub Store',
          sellerId: item.organizationId,
          rating: 4.5, // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
          reviewCount: Math.floor(Math.random() * 100) + 10, // –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
          isActive: true,
          createdAt: item.createdAt,
          updatedAt: item.updatedAt,
        };
      }),
      total: items.length,
    };
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π
  @Get('parts/popular')
  async getPopularParts(@Query('limit') limit?: string) {
    const limitNum = limit ? parseInt(limit) : 5;
    const items = await this.itemsService.getPopularForB2C(limitNum);

    return {
      data: items.map(item => {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤ –ø–æ–ª–Ω—ã–µ URL
        let images = item.images && item.images.length > 0 ? item.images : (item.imageUrl ? [item.imageUrl] : []);
        images = images.map(img => {
          if (img.startsWith('http')) {
            return img;
          }
          return `http://localhost:3000${img}`;
        });

        return {
          id: item.id,
          name: item.name,
          description: item.description,
          category: item.category,
          brand: item.sku ? item.sku.split('-')[0] : 'Unknown',
          sku: item.sku,
          price: Number(item.price),
          stock: item.quantity,
          condition: item.condition,
          images: images,
          sellerName: item.organization?.name || 'AutoHub Store',
          sellerId: item.organizationId,
          rating: 4.5,
          reviewCount: Math.floor(Math.random() * 100) + 10,
          isActive: true,
          createdAt: item.createdAt,
          updatedAt: item.updatedAt,
        };
      }),
    };
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—á–∞—Å—Ç–∏
  @Get('parts/:id')
  async getPartDetails(@Param('id') id: string) {
    const item = await this.itemsService.findOneForB2C(parseInt(id));
    
    if (!item) {
      throw new Error(`Part with ID ${id} not found`);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤ –ø–æ–ª–Ω—ã–µ URL
    let images = item.images && item.images.length > 0 ? item.images : (item.imageUrl ? [item.imageUrl] : []);
    images = images.map(img => {
      if (img.startsWith('http')) {
        return img;
      }
      return `http://localhost:3000${img}`;
    });

    return {
      data: {
        id: item.id,
        name: item.name,
        description: item.description,
        category: item.category,
        brand: item.sku ? item.sku.split('-')[0] : 'Unknown',
        sku: item.sku,
        price: Number(item.price),
        stock: item.quantity,
        condition: item.condition,
        images: images,
        sellerName: item.organization?.name || 'AutoHub Store',
        sellerId: item.organizationId,
        rating: 4.5,
        reviewCount: Math.floor(Math.random() * 100) + 10,
        isActive: true,
        createdAt: item.createdAt,
        updatedAt: item.updatedAt,
      },
    };
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤
  @Get('services')
  async getServices() {
    const organizations = await this.organizationsService.findAll();
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã
    const serviceOrganizations = organizations.filter(org => 
      org.businessType === 'service' && org.isActive
    );

    return {
      data: serviceOrganizations.map(org => ({
        id: org.id,
        name: org.name,
        address: org.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
        phone: org.phone || '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω',
        businessType: org.businessType,
        isActive: org.isActive,
        services: [
          '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è',
          '–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞',
          '–†–µ–º–æ–Ω—Ç —Ç–æ—Ä–º–æ–∑–æ–≤',
          '–ó–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤',
          '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–≤–µ—Å–∫–∏',
          '–†–µ–º–æ–Ω—Ç –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞',
          '–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂',
          '–°–≤–∞—Ä–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
        ],
        servicePrices: {
          '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è': 15000,
          '–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞': 8000,
          '–†–µ–º–æ–Ω—Ç —Ç–æ—Ä–º–æ–∑–æ–≤': 25000,
          '–ó–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤': 5000,
          '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–≤–µ—Å–∫–∏': 12000,
          '–†–µ–º–æ–Ω—Ç –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞': 30000,
          '–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂': 3000,
          '–°–≤–∞—Ä–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã': 20000,
        },
        rating: 4.5,
        reviewCount: Math.floor(Math.random() * 50) + 10,
        workingHours: '09:00 - 18:00',
        createdAt: org.createdAt,
        updatedAt: org.updatedAt,
      })),
    };
  }
}
