import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import {
  MessageTemplate,
  TemplateCategory,
} from './entities/message-template.entity';

@Injectable()
export class TemplatesService {
  constructor(
    @InjectRepository(MessageTemplate)
    private readonly templateRepository: Repository<MessageTemplate>,
  ) {}

  /**
   * –°–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async createDefaultTemplates(organizationId: string) {
    const defaultTemplates = [
      {
        organizationId,
        name: '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
        category: TemplateCategory.NOTIFICATION,
        content: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! üöó

–í–∞—à {carModel} –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ!
–ü—Ä–∏–µ–∑–∂–∞–π—Ç–µ –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ {organizationName}`,
      },
      {
        organizationId,
        name: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¢–û',
        category: TemplateCategory.REMINDER,
        content: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! ‚öôÔ∏è

–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤–∞—à–µ–º—É {carModel} –ø–æ—Ä–∞ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.

–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!`,
      },
      {
        organizationId,
        name: '–ê–∫—Ü–∏—è - –°–∫–∏–¥–∫–∞ 20%',
        category: TemplateCategory.PROMO,
        content: `üî• –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï! üî•

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!

–¢–æ–ª—å–∫–æ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞ - —Å–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç!

–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤—ã–≥–æ–¥–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!`,
      },
      {
        organizationId,
        name: '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
        category: TemplateCategory.GREETING,
        content: `üéâ –° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è, {name}! üéâ

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º!
–î–∞—Ä–∏–º —Å–∫–∏–¥–∫—É 15% –Ω–∞ –ª—é–±—ã–µ —É—Å–ª—É–≥–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞.

–ñ–¥—ë–º –≤–∞—Å!`,
      },
      {
        organizationId,
        name: '–ù–æ–≤—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏ –≤ –Ω–∞–ª–∏—á–∏–∏',
        category: TemplateCategory.NOTIFICATION,
        content: `üì¶ –ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ!

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!

–í –Ω–∞–ª–∏—á–∏–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è {carModel}.
–ó–≤–æ–Ω–∏—Ç–µ, –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º!`,
      },
    ];

    for (const template of defaultTemplates) {
      await this.templateRepository.save(template);
    }

    return defaultTemplates.length;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async findAll(organizationId: string) {
    return await this.templateRepository.find({
      where: { organizationId, isActive: true },
      order: { category: 'ASC', usageCount: 'DESC' },
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ ID
   */
  async findOne(id: number, organizationId: string) {
    return await this.templateRepository.findOne({
      where: { id, organizationId },
    });
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
   */
  async create(
    organizationId: string,
    data: Partial<MessageTemplate>,
  ) {
    const template = this.templateRepository.create({
      ...data,
      organizationId,
    });
    return await this.templateRepository.save(template);
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω
   */
  async update(
    id: number,
    organizationId: string,
    data: Partial<MessageTemplate>,
  ) {
    await this.templateRepository.update(
      { id, organizationId },
      data,
    );
    return await this.findOne(id, organizationId);
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
   */
  async remove(id: number, organizationId: string) {
    await this.templateRepository.update(
      { id, organizationId },
      { isActive: false },
    );
    return { success: true };
  }

  /**
   * –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  async incrementUsage(id: number) {
    await this.templateRepository.increment({ id }, 'usageCount', 1);
  }

  /**
   * –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–µ
   */
  fillTemplate(
    template: string,
    variables: Record<string, string>,
  ): string {
    let result = template;

    for (const [key, value] of Object.entries(variables)) {
      const regex = new RegExp(`\\{${key}\\}`, 'g');
      result = result.replace(regex, value);
    }

    return result;
  }
}

