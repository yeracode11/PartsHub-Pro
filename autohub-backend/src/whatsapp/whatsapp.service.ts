import { Injectable, Logger, OnModuleInit, Inject } from '@nestjs/common';
import { Client, LocalAuth, Message } from 'whatsapp-web.js';
import * as qrcode from 'qrcode-terminal';
import { MessageHistoryService } from './message-history.service';
import { MessageStatus } from './entities/message-history.entity';

@Injectable()
export class WhatsAppService implements OnModuleInit {
  private client: Client;
  private readonly logger = new Logger(WhatsAppService.name);
  private isReady = false;
  private qrCode: string | null = null;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 3;

  constructor(
    @Inject(MessageHistoryService)
    private readonly historyService: MessageHistoryService,
  ) {}

  async onModuleInit() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WhatsApp
    const enableWhatsApp = process.env.ENABLE_WHATSAPP !== 'false';
    
    if (!enableWhatsApp) {
      this.logger.warn('‚ö†Ô∏è WhatsApp –æ—Ç–∫–ª—é—á–µ–Ω (ENABLE_WHATSAPP=false)');
      this.logger.warn('üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ENABLE_WHATSAPP=true');
      return;
    }

    this.logger.log('üì± –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WhatsApp –≤ —Ñ–æ–Ω–µ...');
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    setImmediate(async () => {
      try {
        // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const timeoutPromise = new Promise((_, reject) => 
          setTimeout(() => reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (30 —Å–µ–∫)')), 30000)
        );
        
        await Promise.race([
          this.initialize(),
          timeoutPromise
        ]);
      } catch (error) {
        this.logger.error(`‚ùå WhatsApp –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å: ${error.message}`);
        this.logger.warn('üí° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ WhatsApp');
        this.isReady = false;
      }
    });
  }

  async initialize() {
    this.logger.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WhatsApp –∫–ª–∏–µ–Ω—Ç–∞...');

    try {
      await this.initializeClient();
    } catch (error) {
      this.logger.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WhatsApp: ${error.message}`);
      this.logger.error(`üìã Stack trace: ${error.stack}`);
      this.isReady = false;
      throw error;
    }
  }

  private async initializeClient() {
    this.client = new Client({
      authStrategy: new LocalAuth({
        dataPath: '.wwebjs_auth', // –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
      }),
      puppeteer: {
        headless: true,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--disable-gpu',
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
          '--disable-extensions',
          '--disable-plugins',
          '--disable-images',
          '--disable-javascript',
          '--disable-default-apps',
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-renderer-backgrounding',
        ],
        timeout: 60000, // 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      },
      webVersionCache: {
        type: 'remote',
        remotePath: 'https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2412.54.html',
      },
    });

    // QR –∫–æ–¥ –¥–ª—è –ø–µ—Ä–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    this.client.on('qr', (qr) => {
      this.qrCode = qr;
      this.logger.log('üì≤ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –≤ WhatsApp:');
      qrcode.generate(qr, { small: true });
      this.logger.log(`QR –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ GET /api/whatsapp/qr`);
    });

    // –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤
    this.client.on('ready', () => {
      this.isReady = true;
      this.qrCode = null;
      this.reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
      this.logger.log('‚úÖ WhatsApp –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    });

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    this.client.on('authenticated', () => {
      this.logger.log('‚úÖ WhatsApp –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    });

    // –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    this.client.on('auth_failure', (msg) => {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WhatsApp:', msg);
      this.isReady = false;
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    this.client.on('disconnected', (reason) => {
      this.logger.warn('‚ö†Ô∏è WhatsApp –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
      this.isReady = false;
      this.qrCode = null;
      
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (this.reconnectAttempts < this.maxReconnectAttempts) {
        this.reconnectAttempts++;
        this.logger.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);
        setTimeout(() => {
          this.initialize().catch(err => {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err.message);
          });
        }, 5000); // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
      } else {
        this.logger.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      }
    });

    // –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)
    this.client.on('message', async (message: Message) => {
      this.logger.debug(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.from}: ${message.body}`);
    });

    await this.client.initialize();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
   */
  isClientReady(): boolean {
    return this.isReady;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å QR –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  getQRCode(): string | null {
    return this.qrCode;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É
   */
  async sendMessage(phone: string, message: string): Promise<void> {
    if (!this.isReady) {
      throw new Error('WhatsApp –∫–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥.');
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
      if (!this.client || !this.isReady) {
        throw new Error('WhatsApp –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.');
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const formattedPhone = this.formatPhoneNumber(phone);
      const chatId = `${formattedPhone}@c.us`;

      this.logger.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ ${formattedPhone}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      const sendPromise = this.client.sendMessage(chatId, message);
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (30 —Å–µ–∫)')), 30000)
      );
      
      await Promise.race([sendPromise, timeoutPromise]);
      this.logger.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${formattedPhone}`);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ ${phone}:`, error.message);
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–µ—Å—Å–∏–µ–π, –ø–æ–º–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∫–∞–∫ –Ω–µ–≥–æ—Ç–æ–≤—ã–π
      if (error.message.includes('Session closed') || 
          error.message.includes('Protocol error') ||
          error.message.includes('Target closed')) {
        this.isReady = false;
        this.logger.warn('üîÑ –°–µ—Å—Å–∏—è WhatsApp –∑–∞–∫—Ä—ã—Ç–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
      }
      
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
    }
  }

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
   */
  async sendBulk(
    recipients: Array<{ phone: string; name?: string; customerId?: number }>,
    template: string,
    delayMs: number = 5000,
    options?: {
      organizationId: string;
      sentBy: string;
      campaignName?: string;
    },
  ): Promise<{ sent: number; failed: number; errors: string[] }> {
    if (!this.isReady) {
      throw new Error('WhatsApp –∫–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤');
    }

    const results = {
      sent: 0,
      failed: 0,
      errors: [] as string[],
    };

    this.logger.log(`üì¢ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ ${recipients.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`);

    for (const recipient of recipients) {
      let status = MessageStatus.SENT;
      let errorMessage = null;

      try {
        // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è –≤ —à–∞–±–ª–æ–Ω
        const personalizedMessage = template.replace(
          '{name}',
          recipient.name || '–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç',
        );

        await this.sendMessage(recipient.phone, personalizedMessage);
        results.sent++;
      } catch (error) {
        results.failed++;
        results.errors.push(`${recipient.phone}: ${error.message}`);
        status = MessageStatus.FAILED;
        errorMessage = error.message;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      if (options) {
        try {
          await this.historyService.create({
            organizationId: options.organizationId,
            sentBy: options.sentBy,
            customerId: recipient.customerId,
            phone: recipient.phone,
            message: template.replace(
              '{name}',
              recipient.name || '–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç',
            ),
            status,
            errorMessage,
            isBulk: true,
            campaignName: options.campaignName,
          });
        } catch (e) {
          this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: ${e.message}`);
        }
      }

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (—á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ –±–∞–Ω)
      if (delayMs > 0) {
        await this.delay(delayMs);
      }
    }

    this.logger.log(
      `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${results.sent}, –û—à–∏–±–æ–∫: ${results.failed}`,
    );

    return results;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, PDF)
   * –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MessageMedia –∏–∑ whatsapp-web.js
   */
  async sendMediaMessage(
    phone: string,
    mediaUrl: string,
    caption?: string,
  ): Promise<void> {
    if (!this.isReady) {
      throw new Error('WhatsApp –∫–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤');
    }

    try {
      const formattedPhone = this.formatPhoneNumber(phone);
      const chatId = `${formattedPhone}@c.us`;

      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–æ–π
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ MessageMedia.fromUrl()
      const message = caption
        ? `${caption}\n\n${mediaUrl}`
        : mediaUrl;

      await this.client.sendMessage(chatId, message);

      this.logger.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${formattedPhone}`);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –Ω–∞ ${phone}:`, error.message);
      throw error;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   * +77771234567 -> 77771234567
   */
  private formatPhoneNumber(phone: string): string {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    let cleaned = phone.replace(/\D/g, '');

    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if (cleaned.startsWith('8')) {
      cleaned = '7' + cleaned.substring(1);
    }

    // –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π + –µ—Å–ª–∏ –µ—Å—Ç—å
    if (cleaned.startsWith('+')) {
      cleaned = cleaned.substring(1);
    }

    return cleaned;
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞ (—É—Ç–∏–ª–∏—Ç–∞)
   */
  private delay(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  async reconnect(): Promise<void> {
    this.logger.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WhatsApp...');
    
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç
      if (this.client) {
        await this.client.destroy();
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.isReady = false;
      this.qrCode = null;
      this.reconnectAttempts = 0;
      
      // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
      await this.initialize();
      this.logger.log('‚úÖ WhatsApp –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω');
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
   */
  async destroy() {
    if (this.client) {
      await this.client.destroy();
      this.logger.log('WhatsApp –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }
}

