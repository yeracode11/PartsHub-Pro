import 'package:dio/dio.dart';
import 'package:autohub_b2b/services/auth/secure_storage_service.dart';

/// –ì–ª–æ–±–∞–ª—å–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º JWT —Ç–æ–∫–µ–Ω–∞
class ApiClient {
  static final ApiClient _instance = ApiClient._internal();
  factory ApiClient() => _instance;

  late final Dio dio;
  final SecureStorageService _storage = SecureStorageService();

  String get baseUrl => dio.options.baseUrl;

  ApiClient._internal() {
    dio = Dio(
      BaseOptions(
        baseUrl: 'http://78.140.246.83:3000', // Production API —Å–µ—Ä–≤–µ—Ä
        connectTimeout: const Duration(seconds: 30),
        receiveTimeout: const Duration(seconds: 30),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
      ),
    );

    _setupInterceptors();
  }

  void _setupInterceptors() {
    // Interceptor –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞
    dio.interceptors.add(
      InterceptorsWrapper(
        onRequest: (options, handler) async {
          final token = await _storage.getAuthToken();
          if (token != null) {
            options.headers['Authorization'] = 'Bearer $token';
          }

          print('üåê REQUEST: ${options.method} ${options.uri}');
          if (token != null) {
            print('   Token: ${token.substring(0, 20)}...');
          }

          return handler.next(options);
        },
        onResponse: (response, handler) {
          print('‚úÖ RESPONSE: ${response.statusCode} ${response.requestOptions.uri}');
          return handler.next(response);
        },
        onError: (error, handler) async {
          print('‚ùå ERROR: ${error.response?.statusCode} ${error.requestOptions.uri}');
          print('   Message: ${error.message}');
          print('   Data: ${error.response?.data}');

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ 401 - —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
          if (error.response?.statusCode == 401) {
            print('‚ö†Ô∏è Token expired or invalid - clearing storage');
            
            // –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            try {
              final storage = SecureStorageService();
              await storage.clearAll();
              print('‚úÖ Storage cleared - user needs to re-login');
            } catch (e) {
              print('‚ùå Error clearing storage: $e');
            }
          }

          return handler.next(error);
        },
      ),
    );
  }
}

