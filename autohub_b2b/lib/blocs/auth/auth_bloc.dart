import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:autohub_b2b/blocs/auth/auth_event.dart';
import 'package:autohub_b2b/blocs/auth/auth_state.dart';
import 'package:autohub_b2b/models/user_model.dart';
import 'package:autohub_b2b/services/auth/secure_storage_service.dart';
import 'package:dio/dio.dart';

class AuthBloc extends Bloc<AuthEvent, AuthState> {
  final SecureStorageService _storage = SecureStorageService();

  AuthBloc() : super(AuthInitial()) {
    on<AuthCheckRequested>(_onAuthCheckRequested);
    on<AuthSignInRequested>(_onSignInRequested);
    on<AuthSignUpRequested>(_onSignUpRequested);
    on<AuthSignOutRequested>(_onSignOutRequested);
  }

  Future<void> _onAuthCheckRequested(
      AuthCheckRequested event, Emitter<AuthState> emit) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userData = await _storage.getUserData();
      final token = await _storage.getAuthToken();

      if (userData != null && token != null) {
        print('‚úÖ AuthBloc: Found saved user data');
        print('   Token starts with: ${token.substring(0, 30)}...');
        
        final userModel = UserModel(
          uid: userData['uid'],
          name: userData['name'] ?? 'User',
          email: userData['email'] ?? '',
          role: UserRole.values.firstWhere(
            (e) => e.toString() == userData['role'],
            orElse: () => UserRole.owner,
          ),
          businessType: BusinessType.values.firstWhere(
            (e) => e.toString() == userData['businessType'],
            orElse: () => BusinessType.service,
          ),
          createdAt: DateTime.parse(userData['createdAt']),
        );
        emit(AuthAuthenticated(userModel));
      } else {
        print('‚ÑπÔ∏è AuthBloc: No saved user data found');
        emit(AuthUnauthenticated());
      }
    } catch (e) {
      print('‚ùå AuthBloc: Error checking auth - $e');
      emit(AuthError(e.toString()));
    }
  }

  Future<void> _onSignInRequested(
      AuthSignInRequested event, Emitter<AuthState> emit) async {
    try {
      print('üîê AuthBloc: Starting sign in...');
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
      await _storage.clearAll();
      print('üßπ Cleared old tokens');
      
      emit(AuthLoading());
      
      // –®–∞–≥ 1: –ü—Ä—è–º–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–∞—à –±—ç–∫–µ–Ω–¥
      final dio = Dio(BaseOptions(baseUrl: 'http://78.140.246.83:3000'));
      final jwtResponse = await dio.post('/api/auth/login', data: {
        'email': event.email,
        'password': event.password,
      });

      final jwtData = jwtResponse.data;
      print('‚úÖ AuthBloc: JWT auth successful!');
      print('   User: ${jwtData['user']['name']}');
      print('   Role: ${jwtData['user']['role']}');
      print('   Organization: ${jwtData['user']['organization']['name']}');

      // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º UserModel –∏–∑ –¥–∞–Ω–Ω—ã—Ö –±—ç–∫–µ–Ω–¥–∞
      final userModel = UserModel(
        uid: jwtData['user']['id'],
        name: jwtData['user']['name'] ?? 'User',
        email: jwtData['user']['email'],
        role: _parseRole(jwtData['user']['role']),
        businessType: _parseBusinessType(jwtData['user']['organization']['businessType']),
        createdAt: DateTime.now(),
      );
      
      // –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω—è–µ–º JWT —Ç–æ–∫–µ–Ω—ã –∏ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await _storage.saveUserData({
        'uid': userModel.uid,
        'name': userModel.name,
        'email': userModel.email,
        'role': userModel.role.toString(),
        'businessType': userModel.businessType.toString(),
        'createdAt': userModel.createdAt.toIso8601String(),
        'organizationId': jwtData['user']['organizationId'],
        'organization': jwtData['user']['organization'],
      });
      
      await _storage.saveAuthTokens(
        authToken: jwtData['accessToken'],  // JWT —Ç–æ–∫–µ–Ω!
        refreshToken: jwtData['refreshToken'],
      );
      
      print('‚úÖ AuthBloc: JWT tokens and user data saved');
      emit(AuthAuthenticated(userModel));
      print('‚úÖ AuthBloc: AuthAuthenticated state emitted');
    } on DioException catch (e) {
      print('‚ùå AuthBloc: DioException - ${e.response?.data}');
      emit(AuthError(e.response?.data['message'] ?? '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'));
    } catch (e) {
      print('‚ùå AuthBloc: Generic error - $e');
      emit(AuthError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: $e'));
    }
  }

  UserRole _parseRole(String? role) {
    switch (role) {
      case 'owner':
        return UserRole.owner;
      case 'manager':
        return UserRole.manager;
      case 'storekeeper':
        return UserRole.storekeeper;
      case 'worker':
        return UserRole.worker;
      default:
        return UserRole.owner;
    }
  }

  BusinessType _parseBusinessType(String? type) {
    switch (type) {
      case 'service':
        return BusinessType.service;
      case 'dismantler':
        return BusinessType.dismantler;
      case 'carwash':
        return BusinessType.carwash;
      default:
        return BusinessType.service;
    }
  }

  Future<void> _onSignUpRequested(
      AuthSignUpRequested event, Emitter<AuthState> emit) async {
    try {
      emit(AuthLoading());
      emit(AuthError('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'));
    } catch (e) {
      emit(AuthError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: $e'));
    }
  }

  Future<void> _onSignOutRequested(
      AuthSignOutRequested event, Emitter<AuthState> emit) async {
    try {
      await _storage.clearAll();
      emit(AuthUnauthenticated());
    } catch (e) {
      emit(AuthError(e.toString()));
    }
  }
}

